//import groovy.json.JsonSlurper
import groovy.json.JsonSlurperClassic 

@NonCPS
def jobExecute(def command){
    def sout = new StringBuilder(), serr = new StringBuilder()
    //def cmd = "docker build --no-cache --tag ${tag} --build-arg GIT_COMMIT_ID="%GIT_COMMIT% - %GIT_REPO% - %GIT_BRANCH%" --build-arg JENKINS_ID="%JOB_NAME% - %NODE_NAME% - %JENKINS_URL%" -f ${dockerfile} ."
    //def proc = 'docker ps'.execute()
    //def proc = "cmd /c echo ${name}".execute()
    def proc = command.execute()
    proc.consumeProcessOutput(sout, serr)
    proc.waitForOrKill(1000)
    println "sout> $sout"
    println "serr> $serr"    
    return "$sout"
    
    // def sout = new StringBuilder(), serr = new StringBuilder()
    // //def args = ['cmd', '/c', 'dir']
    // def args = ['cmd', '/c', 'C:\\Users\\AAithal\\Desktop\\MIR3\\bin\\inConsole', '-H', 'company.mir3.com', '-u', 'user', '-p', 'password', '-I', '-i', 'Server']
    // def proc = new ProcessBuilder( args )
    // Process process = proc.start()
    // process.consumeProcessOutput( sout, serr )
    // process.waitForOrKill( 2000 )
    // println sout
}

@NonCPS
def jsonParseSlurperClassic(def json) {
    def jsonSlurperClassic = new JsonSlurperClassic()
    def resultJson = jsonSlurperClassic.parseText(json)
    println "resultJson.containers.size(): " + resultJson.containers.size().toString()
    println "======================"

    for (i = 0; i < resultJson.containers.size(); i++){
        def name = resultJson.containers[i].name
        def tag = resultJson.containers[i].tag
        def dockerfile = resultJson.containers[i].dockerfile
        println "name.getClass(): " + name.getClass()
        println "tag.getClass(): " + tag.getClass()
        println "dockerfile.getClass(): " + dockerfile.getClass()
        // name.toString()
        // tag.toString()
        // dockerfile.toString()
        println "name: " + name
        println "tag: " + tag
        println "dockerfile: " + dockerfile
        println "----------------------"   
    }
    println "======================"
}


node {
    stage('Preparation') {
      git branch: 'master', url: 'https://github.com/mcajkovs/jenkins-ci.git'
    }

    stage('Build') {
        //def userDataJson1 = jsonParseSlurperClassic(params.MY_PARAM1)
        println "########################"
        println("WORKSPACE: " + WORKSPACE)  // C:\Program Files (x86)\Jenkins\workspace\mcajkovs-parametrized-build-consumer
        println "########################"
        
        bat '''
          @echo off
          setlocal enableextensions
          for /f %%i in ('git config --get remote.origin.url') do set GIT_REPO=%%i
          for /f %%i in ('git rev-parse --abbrev-ref HEAD') do set GIT_BRANCH=%%i
          for /f "tokens=*" %%i in ('git log -1 --pretty^=format:"%%h - %%cd - %%cn" --date=format:"%%Y/%%m/%%d %%H:%%M:%%S"') do set GIT_COMMIT=%%i
          REM @echo on
          echo "BAT_GIT_COMMIT: %GIT_COMMIT%"
          echo "BAT_GIT_REPO: %GIT_REPO% - %GIT_BRANCH%"
          echo "BAT_GIT_BRANCH: %GIT_BRANCH%"
          echo "BAT_PWD: %cd%"
        '''
        println "########################"
        def EXEC_GIT_REPO1 = jobExecute("git config --get remote.origin.url")            // EMPTY RESULT
        def EXEC_GIT_REPO2 = jobExecute('cmd /c git config --get remote.origin.url')     // EMPTY RESULT
        def EXEC_GIT_REPO3 = jobExecute('cmd /c "git config --get remote.origin.url"')   // EMPTY RESULT
        def EXEC_GIT_REPO4 = jobExecute("cmd /c \"git config --get remote.origin.url\"") // EMPTY RESULT
        def EXEC_GIT_REPO5 = jobExecute("cmd /c git config --get remote.origin.url")     // EMPTY RESULT
        def GIT_CONFIG = jobExecute("cmd /c git config --list")                          // WORKS - git command was found
        def EXEC_PWD = jobExecute("cmd /c echo %cd%")                                    // C:\Program Files (x86)\Jenkins
        println "EXEC_GIT_REPO1: ${EXEC_GIT_REPO1}"
        println "EXEC_GIT_REPO2: ${EXEC_GIT_REPO2}"
        println "EXEC_GIT_REPO3: ${EXEC_GIT_REPO3}"
        println "EXEC_GIT_REPO4: ${EXEC_GIT_REPO4}"
        println "EXEC_GIT_REPO5: ${EXEC_GIT_REPO5}"
        println "EXEC_GIT_CONFIG: ${GIT_CONFIG}"
        println "EXEC_PWD: ${EXEC_PWD}"
        
        
        
        // def jsonSlurperClassic = new JsonSlurperClassic()
        // def resultJson = jsonSlurperClassic.parseText(params.MY_PARAM1)
        // println "resultJson.containers.size(): " + resultJson.containers.size().toString()
         // for (i = 0; i < resultJson.containers.size(); i++){

          // def name = resultJson.containers[i].name
          // def tag = resultJson.containers[i].tag
          // def dockerfile = resultJson.containers[i].dockerfile
          
          // println "name: " + name
          // println "tag: " + tag
          // println "dockerfile: " + dockerfile
          // println "----------------------"
          
          // // STOPS AT FIRST ITERATION
          // // bat """
          // // @echo off
          // // echo "bat echo tag ${name}"
          // // echo "bat echo tag ${tag}"
          // // echo "bat echo tag ${dockerfile}"
          // // """
        // }
        println "########################"
    }
}

/*
node()
{
    print "DEBUG: parameter foo = ${foo}"
}
*/